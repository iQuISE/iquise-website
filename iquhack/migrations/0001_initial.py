# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2020-12-18 02:21
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import iquhack.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='If empty, will use filename without the extension.', max_length=50)),
                ('file', models.FileField(upload_to=iquhack.models.upload_section_attachment)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=100)),
                ('answer', models.TextField(help_text="This must be HTML! You can use the Django template language.<br>The following context will be available:<br>&nbsp;&nbsp;&nbsp;&nbsp;hackathon: The Hackathon database object.<br>&nbsp;&nbsp;&nbsp;&nbsp;formatted_event_date: The event's date formatted like 'February 1st-2nd'<br>", max_length=1000)),
                ('general', models.BooleanField(default=False, help_text="Check this if this question and answer pair are general enough for any hackathon. If unchecked, it won't be listed in the hackathon's list of available FAQs.")),
            ],
            options={
                'verbose_name': 'FAQ',
            },
        ),
        migrations.CreateModel(
            name='Hackathon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(unique=True)),
                ('end_date', models.DateField()),
                ('back_drop_image', models.ImageField(help_text='A high-res progressive jpeg is the best option.', upload_to=iquhack.models.upload_backdrop)),
                ('published', models.BooleanField(default=False, help_text='Make available on website.')),
                ('link', models.URLField(blank=True)),
                ('early_note', models.CharField(blank=True, max_length=200)),
                ('opens', models.DateTimeField()),
                ('open_note', models.CharField(blank=True, max_length=200)),
                ('deadline', models.DateTimeField(help_text='THIS WILL NOT PREVENT RESPONSES! Simply removes the link.')),
                ('closed_note', models.CharField(blank=True, max_length=200)),
                ('logo_max_height', models.PositiveSmallIntegerField(default=50, help_text='In pixels.')),
                ('logo_max_side_margin', models.PositiveSmallIntegerField(default=12, help_text='In pixels.')),
                ('logo_max_bottom_margin', models.PositiveSmallIntegerField(default=8, help_text='In pixels.')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField(default=0, help_text='Higher numbers get rendered lower on page.')),
                ('title', models.CharField(max_length=20)),
                ('content', models.TextField(blank=True, help_text="This must be HTML! You can use the Django template language.<br>The following context will be available:<br>&nbsp;&nbsp;&nbsp;&nbsp;hackathon: The Hackathon database object.<br>&nbsp;&nbsp;&nbsp;&nbsp;formatted_event_date: The event's date formatted like 'February 1st-2nd'<br><br><br>Additionally, this can implement sections defined in the template if provided.<br>Files can be accessed using {{ attachments |get_item:'[NAME]' }} (careful with spaces).")),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.Hackathon')),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='SectionTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('content', models.TextField(help_text="This must be HTML! You can use the Django template language.<br>The following context will be available:<br>&nbsp;&nbsp;&nbsp;&nbsp;hackathon: The Hackathon database object.<br>&nbsp;&nbsp;&nbsp;&nbsp;formatted_event_date: The event's date formatted like 'February 1st-2nd'<br>")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('logo', models.ImageField(blank=True, help_text='SVG files strongly encouraged!', upload_to=iquhack.models.upload_sponsor_logo)),
                ('link', models.URLField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sponsorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.BooleanField(default=False, help_text='This sponsor is also providing hardware/platform.')),
                ('agreement', models.FileField(blank=True, upload_to=iquhack.models.upload_sponsor_agreement)),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.Hackathon')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.Sponsor')),
            ],
            options={
                'ordering': ['-platform', 'tier'],
            },
        ),
        migrations.CreateModel(
            name='Tier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField(default=0, help_text='Higher numbers get rendered lower on page.', unique=True)),
                ('logo_rel_size', models.FloatField(default=100, help_text="Percentage. A value resulting in < 1 pixel won't be rendered.")),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='UsedFAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField(default=0, help_text='Higher numbers get rendered lower on page.')),
                ('FAQ', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.FAQ')),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.Hackathon')),
            ],
            options={
                'ordering': ['index'],
                'verbose_name': 'Used FAQ',
            },
        ),
        migrations.AddField(
            model_name='sponsorship',
            name='tier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='iquhack.Tier'),
        ),
        migrations.AddField(
            model_name='section',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='iquhack.SectionTemplate'),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='FAQs',
            field=models.ManyToManyField(through='iquhack.UsedFAQ', to='iquhack.FAQ'),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='sponsors',
            field=models.ManyToManyField(through='iquhack.Sponsorship', to='iquhack.Sponsor'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iquhack.Section'),
        ),
        migrations.AlterUniqueTogether(
            name='usedfaq',
            unique_together=set([('hackathon', 'FAQ'), ('hackathon', 'index')]),
        ),
        migrations.AlterUniqueTogether(
            name='sponsorship',
            unique_together=set([('hackathon', 'sponsor')]),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together=set([('hackathon', 'index'), ('hackathon', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='attachment',
            unique_together=set([('section', 'name')]),
        ),
    ]
